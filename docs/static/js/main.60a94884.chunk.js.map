{"version":3,"sources":["components/TronLinkGuide/index.js","utils/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["WEBSTORE_URL","logo","react_default","a","createElement","className","src","TronLinkLogo","alt","openTronLink","window","open","TronLinkGuide","props","_props$installed","installed","onClick","href","target","rel","utils","tronWeb","contract","setTronWeb","_setTronWeb","Object","asyncToGenerator","regenerator_default","mark","_callee","contractAddress","wrap","_context","prev","next","console","log","this","at","sent","stop","_x","_x2","apply","arguments","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","balance","gettrxtrc10amount","address","TRC10contractbalance","TRC20contractbalance","gettrxtrc20amount","TRXcontractbalance","loggedIn","updateTRC10Value","bind","assertThisInitialized","updateTRC20Value","setState","loading","Promise","resolve","tronWebState","ready","_this2","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","Utils","trx","getAccount","toString","fromHex","parseFloat","getTRC10TokenBalance","getBalance","_amount","SwapToTRC10","toSun","send","shouldPollResponse","callValue","then","res","Swal","title","type","catch","err","evt","value","_trc10amount","SwapToTRC20","tokenId","tokenValue","_this3","style","color","backgroundColor","height","width","onChange","event","preventDefault","SwapTRXTRC10","SwapTRC10TRC20","components_TronLinkGuide","React","Component","ReactDOM","render","components_App","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.60a94884.chunk.js","sourcesContent":["import React from 'react';\n\nimport TronLinkLogo from './TronLinkLogo.png';\nimport './TronLinkGuide.scss';\n\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\n\nconst logo = (\n    <div className='logo'>\n        <img src={ TronLinkLogo } alt='TronLink logo' />\n    </div>\n);\n\nconst openTronLink = () => {\n    window.open(WEBSTORE_URL, '_blank');\n};\n\nconst TronLinkGuide = props => {\n    const {\n        installed = false\n    } = props;\n\n    if(!installed) {\n        return (\n            <div className='tronLink' onClick={ openTronLink }>\n                <div className='info'>\n                    <h1>TronLink Required</h1>\n                    <p>\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\n                        Once installed, return back and refresh the page.\n                    </p>\n                </div>\n                { logo }\n            </div>\n        );\n    }\n\n    return (\n        <div className='tronLink hover' onClick={ openTronLink }>\n            <div className='info'>\n                <h1>Log in Required</h1>\n                <p>\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\n                    first wallet or decrypt a previously-created wallet.\n                </p>\n            </div>\n            { logo }\n        </div>\n    );\n};\n\nexport default TronLinkGuide;","//const contractAddress = 'TEKMUKXhkYuwNxa5Y8jpeZCxCrRdDnaSNt' ///// paste (base58) key of SmartContract instead of current key\n//const contractAddress = '' ///// paste (base58) key of SmartContract instead of current key\n\n\n\nconst utils = {\n    tronWeb: false,\n    contract: false,\n\n    async setTronWeb(tronWeb, contractAddress) {\n        console.log('contractAddress', contractAddress)\n        this.tronWeb = tronWeb;\n        this.contract = await tronWeb.contract().at(contractAddress)\n    },\n\n};\n\nexport default utils;\n\n","import React from 'react';\nimport TronLinkGuide from 'components/TronLinkGuide';\nimport TronWeb from 'tronweb';\nimport Utils from 'utils';\nimport Swal from 'sweetalert2';\n\nimport './App.scss';\n\nconst FOUNDATION_ADDRESS = 'TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg';\nconst CONTRACT_ADDRESS = 'THvPHk2XEMyVDQWg6zwXQb3QTkAc2UADMF';\nconst TRC20_TOKEN_CONTRACT_ADDRESS = 'TAT8wMfoNDvC71XAcq7gSBipayM721MKHV';\nconst TOKEN_ID = 1000292;\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            balance: 0,\n            gettrxtrc10amount: 0,\n            address: '',\n            TRC10contractbalance:'',\n            TRC20contractbalance:'',\n            gettrxtrc20amount:0,\n            TRXcontractbalance:'',\n\n              tronWeb: {\n                  installed: false,\n                  loggedIn: false\n              },\n            }\n        this.updateTRC10Value = this.updateTRC10Value.bind(this)\n        this.updateTRC20Value = this.updateTRC20Value.bind(this)\n\n    }\n\n    async componentDidMount() {\n\n        this.setState({loading:true})\n        await new Promise(resolve => {\n            const tronWebState = {\n                installed: !!window.tronWeb,\n                loggedIn: window.tronWeb && window.tronWeb.ready\n            };\n\n            if(tronWebState.installed) {\n                this.setState({\n                    tronWeb:\n                    tronWebState\n                });\n\n                return resolve();\n            }\n\n            let tries = 0;\n\n            const timer = setInterval(() => {\n                if(tries >= 10) {\n                    const TRONGRID_API = 'https://api.trongrid.io';\n\n                    window.tronWeb = new TronWeb(\n                        TRONGRID_API,\n                        TRONGRID_API,\n                        TRONGRID_API\n                    );\n\n                    this.setState({\n                        tronWeb: {\n                            installed: false,\n                            loggedIn: false\n                        }\n                    });\n\n                    clearInterval(timer);\n                    return resolve();\n                }\n\n                tronWebState.installed = !!window.tronWeb;\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n                if(!tronWebState.installed)\n                    return tries++;\n\n                this.setState({\n                    tronWeb: tronWebState,\n                    contractAddress: CONTRACT_ADDRESS,\n                });\n                resolve();\n            }, 100);\n        });\n\n        if(!this.state.tronWeb.loggedIn) {\n            // Set default address (foundation address) used for contract calls\n            // Directly overwrites the address object as TronLink disabled the\n            // function call\n            window.tronWeb.defaultAddress = {\n                hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n                base58: FOUNDATION_ADDRESS\n            };\n\n            window.tronWeb.on('addressChanged', () => {\n                if(this.state.tronWeb.loggedIn)\n                    return;\n\n                this.setState({\n                    tronWeb: {\n                        installed: true,\n                        loggedIn: true\n                    }\n                });\n            });\n        }\n\n        await Utils.setTronWeb(window.tronWeb, CONTRACT_ADDRESS);\n\n        this.setState({\n            address : Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString())),\n            TRC10contractbalance : parseFloat((await Utils.contract.getTRC10TokenBalance(TOKEN_ID).call()).toString())/1000000,\n            TRXcontractbalance : parseFloat((await Utils.contract.getBalance().call()).toString())/1000000,\n\n        });\n\n        //await Utils.setTronWeb(window.tronWeb);\n        //console.log(Utils.tronWeb.address.fromHex((((await Utils.tronWeb.trx.getAccount()).address).toString())));  /////// Get account address and info\n        console.log(Utils.contract);\n    }\n\n    /////////////////////////////////////// SwapTRXTRC10 /////////////////////////////////\n    async SwapTRXTRC10(_amount){\n\n        Utils.contract.SwapToTRC10(this.state.address, Utils.tronWeb.toSun(_amount), TOKEN_ID).send({\n            shouldPollResponse: true,\n            callValue: Utils.tronWeb.toSun(_amount)\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateTRC10Value (evt) {\n        console.log('gettrxtrc10amount : ', this.state.gettrxtrc10amount);\n            this.setState({\n              gettrxtrc10amount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXTRC10 /////////////////////////////////\n\n\n\n\n\n    /////////////////////////////////////// SwapTRXTRC20 /////////////////////////////////\n    async SwapTRC10TRC20(_trc10amount){\n\n        Utils.contract.SwapToTRC20(TRC20_TOKEN_CONTRACT_ADDRESS).send({\n            //shouldPollResponse: true,\n            //callValue: Utils.tronWeb.toSun(_amount),\n            tokenId: TOKEN_ID,\n            tokenValue: _trc10amount*10,\n        }).then(res => Swal({\n            title:'Transfer Successful',\n            type: 'success'\n        })).catch(err => Swal({\n            title:'Transfer Failed',\n            type: 'error'\n        }));\n    }\n\n    updateTRC20Value (evt) {\n        console.log('gettrxtrc20amount : ', this.state.gettrxtrc20amount);\n            this.setState({\n              gettrxtrc20amount: evt.target.value\n            });\n    }\n    /////////////////////////////////////// SwapTRXTRC20 /////////////////////////////////\n\n\n\n\n\n    render() {\n        if(!this.state.tronWeb.installed)\n            return <TronLinkGuide />;\n\n        if(!this.state.tronWeb.loggedIn)\n            return <TronLinkGuide installed />;\n\n        return (\n              <div className='row'>\n                <div className='col-lg-12 text-center' >\n                  <hr/>\n\n                  <h2 style={{color : 'white' }}>CCGX Token Swap Platform</h2>\n                  <br/>\n                  <hr style={{color: 'white', backgroundColor: 'white', height: 0.5}}/>\n                  <br/>\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <h4> Get TRC10 CCGX Tokens in exchange with TRX for 1:1 ratio </h4>\n                  <p> <i> Current TRC10 CCGX Supply in Smart Contract : {this.state.TRC10contractbalance} </i></p>\n                  <br/>\n                  <p>Type number of tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxtrc10amount} onChange={this.updateTRC10Value}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRXTRC10(this.state.gettrxtrc10amount)\n                                                                     }  }>Swap TRX to TRC10\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                  <br/>\n                  <h4> Get TRC20 CCGX Tokens in exchange with TRC10 CCGX Tokens for 1:10 ratio </h4>\n                  <p> <i> Current TRC20 CCGX Supply in Smart Contract : {this.state.TRC20contractbalance} </i></p>\n                  <br/>\n                  <p>Type number of TRC20 tokens to exchange</p>\n                  <input style={{ width:\"200px\" }} value={this.state.gettrxtrc20amount} onChange={this.updateTRC20Value}/>\n                  <br/>\n                  <br/>\n                  <button className='btn btn-danger' onClick={(event) => {\n                                                                       event.preventDefault()\n                                                                       this.SwapTRC10TRC20(this.state.gettrxtrc20amount)\n                                                                     }  }>Swap TRC10 to TRC20\n                  </button>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n                  <br/>\n\n\n\n\n\n\n\n                  <hr style={{color: 'red', backgroundColor: 'red', height: 0.5}}/>\n                  <p style={{color: 'red'}}> <i> *For Official Use Only </i></p>\n\n                  <p> <i> Current TRX Supply in Smart Contract : {this.state.TRXcontractbalance} </i></p>\n\n\n\n\n\n\n                  <br/>\n                  <br/>\n                </div>\n              </div>\n        );\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}